<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | TOPI.CO]]></title>
  <link href="http://khua.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://khua.github.com/"/>
  <updated>2012-12-31T11:21:22+08:00</updated>
  <id>http://khua.github.com/</id>
  <author>
    <name><![CDATA[Kevin Hua]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[采用Nginx和Passenger部署Rails应用]]></title>
    <link href="http://khua.github.com/blog/2012/03/19/cai-yong-nginxhe-passengerbu-shu-railsying-yong/"/>
    <updated>2012-03-19T23:50:00+08:00</updated>
    <id>http://khua.github.com/blog/2012/03/19/cai-yong-nginxhe-passengerbu-shu-railsying-yong</id>
    <content type="html"><![CDATA[<p>使用Nginx和Passenger组合，部署Rails应用程序，是不个不错的选择。</p>

<p>为了使安装速度提高，可以使用<a href="http://ruby.taobao.org">淘宝镜像</a>作为Rubygems的源。</p>

<p>Ubuntu系统下，需要先安装PCRE:</p>

<p><code>ruby
sudo apt-get install libpcre3 libpcre3-dev
</code></p>

<p>步骤如下：</p>

<h3>(1) gem install passenger</h3>

<h3>(2) passenger-install-nginx-module</h3>

<h3>(3) 设置Nginx的配置文件</h3>

<p>比较关键的设置：</p>

<p><code>
user www-data #即应用程序文件夹的所有者
</code></p>

<!--more-->


<p>```</p>

<h1>设置主Server，也可以选择使用vhost server</h1>

<p>server {
  listen        80;
  server_name   localhost;
  root      /path/to/your/rails_app/public;
  passenger_enabled on;
  ... ...
}
```</p>

<p>```</p>

<h1>注释掉location / {... ...}这个block</h1>

<p>```</p>

<h3>Nginxd自动启动脚本 (init.d) —— CentOS适用</h3>

<p><div><script src='https://gist.github.com/3683271.js?file='></script>
<noscript><pre><code>#!/bin/bash
# v.0.0.1
# create by jackbillow at 2007.10.15
# nginx - This shell script takes care of starting and stopping nginx.
#
# chkconfig: 35 60 50
# description: nginx [engine x] is light http web/proxy server
# that answers incoming ftp service requests.
# processname: nginx
# config: /usr/local/nginx/conf/nginx.conf
nginx_path=&quot;/usr/local/nginx&quot;
nginx_pid=&quot;/usr/local/nginx/logs/nginx.pid&quot;
# Source function library.
. /etc/rc.d/init.d/functions
# Source networking configuration.
. /etc/sysconfig/network
# Check that networking is up.
[ ${NETWORKING} = &quot;no&quot; ] &amp;&amp; exit 0
[ -x $nginx_path/sbin/nginx ] || exit 0
RETVAL=0
prog=&quot;nginx&quot;
start() {
# Start daemons.
if [ -e $nginx_pid -a ! -z $nginx_pid ];then
echo &quot;nginx already running...&quot;
exit 1
fi

if [ -e /usr/local/nginx/conf/nginx.conf ];then
  echo -n $&quot;Starting $prog: &quot;
  $nginx_path/sbin/nginx -c /usr/local/nginx/conf/nginx.conf &amp;
  RETVAL=$?
[ $RETVAL -eq 0 ] &amp;&amp; {
touch /var/lock/subsys/$prog
success $&quot;$prog&quot;
}
echo
else
RETVAL=1
fi
return $RETVAL
}
# Stop daemons.
stop() {
        echo -n $&quot;Stopping $prog: &quot;
        killproc -d 10 $nigx_path/sbin/nginx
        RETVAL=$?
        echo
        [ $RETVAL = 0 ] &amp;&amp; rm -f $nginx_pid /var/lock/subsys/$prog
}
# See how we were called.
case &quot;$1&quot; in
start)
        start
        ;;
stop)
        stop
        ;;
reconfigure)
        stop
        start
        ;;
status)
        status $prog
        RETVAL=$?
        ;;
*)
        echo $&quot;Usage: $0 {start|stop|reconfigure|status}&quot;
        exit 1
esac
exit $RETVAL</code></pre></noscript></div>
</p>

<h3>Nginx自动启动脚本 (init.d) —— Ubuntu适用</h3>

<p><div><script src='https://gist.github.com/3683273.js?file='></script>
<noscript><pre><code>#! /bin/sh
### BEGIN INIT INFO
# Provides:          nginx
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the nginx web server
# Description:       starts nginx using start-stop-daemon
### END INIT INFO
PATH=/usr/local/nginx/sbin:$PATH
DAEMON=/usr/local/nginx/sbin/nginx
NAME=nginx
DESC=nginx
test -x $DAEMON || exit 0
# Include nginx defaults if available
if [ -f /etc/default/nginx ] ; then
    . /etc/default/nginx
fi
set -e
. /lib/lsb/init-functions
case &quot;$1&quot; in
  start)
    echo -n &quot;Starting $DESC: &quot;
    start-stop-daemon --start --quiet --pidfile /var/log/$NAME.pid \
        --exec $DAEMON -- $DAEMON_OPTS || true
    echo &quot;$NAME.&quot;
    ;;
  stop)
    echo -n &quot;Stopping $DESC: &quot;
    start-stop-daemon --stop --quiet --pidfile /var/log/$NAME.pid \
        --exec $DAEMON || true
    echo &quot;$NAME.&quot;
    ;;
  restart|force-reload)
    echo -n &quot;Restarting $DESC: &quot;
    start-stop-daemon --stop --quiet --pidfile \
        /var/log/$NAME.pid --exec $DAEMON || true
    sleep 1
    start-stop-daemon --start --quiet --pidfile \
        /var/log/$NAME.pid --exec $DAEMON -- $DAEMON_OPTS || true
    echo &quot;$NAME.&quot;
    ;;
  reload)
      echo -n &quot;Reloading $DESC configuration: &quot;
      start-stop-daemon --stop --signal HUP --quiet --pidfile /var/log/$NAME.pid \
          --exec $DAEMON || true
      echo &quot;$NAME.&quot;
      ;;
  status)
      status_of_proc -p /var/log/$NAME.pid &quot;$DAEMON&quot; nginx &amp;&amp; exit 0 || exit $?
      ;;
  *)
    N=/etc/init.d/$NAME
    echo &quot;Usage: $N {start|stop|restart|reload|force-reload|status}&quot; &gt;&amp;2
    exit 1
    ;;
esac
exit 0</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails本地开发环境和远程部署环境搭建]]></title>
    <link href="http://khua.github.com/blog/2012/03/19/railsben-di-kai-fa-huan-jing-he-yuan-cheng-bu-shu-huan-jing-da-jian/"/>
    <updated>2012-03-19T20:54:00+08:00</updated>
    <id>http://khua.github.com/blog/2012/03/19/railsben-di-kai-fa-huan-jing-he-yuan-cheng-bu-shu-huan-jing-da-jian</id>
    <content type="html"><![CDATA[<p>前段时间测试及部署者也以及Ruby China源程序，本地开发环境选择Ubuntu 10.04.03 LTS *；远程部署环境选择CentOS 5.6 (AMD) 64-bit。</p>

<p>(* 为了支持新的硬件，升级到了<code>linux-header-2.6.32-38</code>，用<code>uname -r</code>查看，显示<code>3.0.0-997-generic</code>)</p>

<h3>一、基于CentOS 5.6的部署环境</h3>

<h4>1a. 设置远程登录</h4>

<p><code>
ssh root@96.126.102.82
</code></p>

<p>Windows环境下，可以使用Putty进行远程连接，并通过修改<code>Apperance: Fixdays</code>及<code>Translation: UTF-8</code>，以正常显示中文。</p>

<h4>1b. 设置locale <code>vim /etc/profile</code>，添加：</h4>

<p><code>ruby
export LC_ALL = zh_CN.UTF8
export LANG = zh_CN.UTF8
</code></p>

<h4>2. 安装一些基本包</h4>

<p><code>
yum install gcc g++ gcc-c++ make
</code></p>

<!--more-->


<h4>3. 手动安装m4, automake, autoconf, libtool指定版本</h4>

<p><code>
m4 &gt;= 1.4.13
autoconf &gt;= 2.65
automake &gt;= 1.11
libtool &gt;= 2.2.6b
</code></p>

<p>这一步是为了安装Coreseek (Sphinx)，可选。</p>

<h4>4. 安装其它一些编译依赖的软件包</h4>

<p><code>
yum install zlib-devel openssl-devel perl cpio expat-devel gettext-devel curl curl-devel imake libxml2 libxml2-devel libxslt libxslt-devel
</code></p>

<h4>5. 安装版本控制系统git (可选择安装最新版本)</h4>

<p><code>
wget http://kernel.org/pub/software/scm/git/git-1.7.6.tar.gz
tar -xzvf git-1.7.6.tar.gz
cd git-1.7.6
./configure --prefix=/usr/local
make &amp;&amp; make install
</code></p>

<p>(后续步骤见第三部分)</p>

<h3>二、基于Ubuntu 10.04 LTS的本地环境</h3>

<h4>1.  设置locale <code>vim /etc/profile</code>，添加：</h4>

<p><code>ruby
export LC_ALL = zh_CN.UTF8
export LANG = zh_CN.UTF8
</code></p>

<h4>2. 安装一些基本包</h4>

<p>(make已经默认安装，3.81版)</p>

<p><code>
sudo apt-get install gcc g++
</code></p>

<h4>3. 手动安装m4, automake, autoconf, libtool指定版本</h4>

<p><code>
m4 &gt;= 1.4.13
autoconf &gt;= 2.65
automake &gt;= 1.11
libtool &gt;= 2.2.6b
</code></p>

<p>这一步是为了安装Coreseek (Sphinx)，可选。</p>

<h4>4. 安装其它一些编译依赖的软件包</h4>

<p><code>
sudo apt-get install zlib1g-dev libssl-dev perl cpio libexpat1-dev gettext curl libcurl4-gnutls-dev xutils-dev libxml2 libxml2-dev libxslt11.1 (?) libxslt-dev libreadline5-dev libyaml-0-2 libyaml-dev
</code></p>

<h4>5. 安装版本控制系统git (可选择安装最新版本)</h4>

<p><code>
sudo apt-get install git-core
</code></p>

<h3>通用安装部分 (Ruby, MongoDB, redis, Coreseek, NodeJS)</h3>

<h4>6. 安装Ruby 1.9.2 p290，并升级Rubygems</h4>

<p>详见后续文章：安装Ruby 1.9.3 p125</p>

<h4>7. 安装mongodb，并配置自动启动服务</h4>

<p>详见后续文章：安装mongodb，并配置自动启动服务</p>

<h4>8. 安装redis，并配置自动启动服务</h4>

<p>详见后续文章：安装mongodb，并配置自动启动服务</p>

<h4>9. 安装Coreseek 4.1 Beta</h4>

<p>可选，详见后续文章：安装Coreseek 4.1版</p>

<h4>10. 安装node.js，并使用npm管理安装</h4>

<p>详见：<a href="http://topi.co/blog/2012/09/09/an-zhuang-he-ce-shi-node-dot-js/">安装和测试Node.JS</a></p>
]]></content>
  </entry>
  
</feed>
