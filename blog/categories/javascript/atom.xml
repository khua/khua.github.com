<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | TOPI.CO]]></title>
  <link href="http://khua.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://khua.github.com/"/>
  <updated>2013-01-02T22:23:36+08:00</updated>
  <id>http://khua.github.com/</id>
  <author>
    <name><![CDATA[Kevin Hua]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[常见的JavaScript MVC框架]]></title>
    <link href="http://khua.github.com/blog/2012/09/15/chang-jian-de-javascript-mvckuang-jia/"/>
    <updated>2012-09-15T17:24:00+08:00</updated>
    <id>http://khua.github.com/blog/2012/09/15/chang-jian-de-javascript-mvckuang-jia</id>
    <content type="html"><![CDATA[<p>翻译比较粗糙，原汁原味的英文请参考：<a href="http://codebrief.com/2012/01/the-top-10-javascript-mvc-frameworks-reviewed/">The Top 12 Javascript MVC Frameworks Reviewed</a></p>

<p>在过去的几个月里，我一直在搜寻完美的JavaScript MVC框架。我希望这个框架概念化和各项特性都比较合理。最终我筛选出了一些框架，下面是对每个框架的简明扼要的概括。在最后，我会告诉你我自己的最终决策。</p>

<p>特别地，下面四个特性对于我来说非常重要：</p>

<ul>
<li>界面绑定 (UI Bindings) - 不仅是模板层的绑定，我希望构成基础的模型发生改变时，可以自动更新视图层 (即模型层和视图层的绑定)。</li>
<li>视图排版 (Composed Views) - 与所有软件开发者一样，我享受创建模块化、可复用的代码。基于这个原因，在编写界面时，我希望可以对视图进行排版 (最好在模板层面)。应该提供丰富的视图层次结构。一个很好的例子就是可以复用的分页Widget。</li>
<li>页面展现层 (Web Presentation Layer) - 我们是在编写网页应用，我希望框架提供原生-样式的Widgets。没有理由每个框架都创建自己的布局管理器。HTML和CSS已经足够，框架必须围绕这一概念。</li>
<li>兼容其它 (Plays Nicely With Others) - 我们需要面对这一点，jQuery 令人震惊。我不希望某个框架集成jQuery的一个子集，我希望框架推荐使用jQuery本身。</li>
</ul>


<!--more-->


<h3>竞争者 (The Contenders)</h3>

<p>下表是支持上述4个特性的JavaScript MVC框架：</p>

<p>Framework   UI Bindings Composed Views  Web Presentation Layer  Plays Nicely With Others</p>

<table>
<tr>
<td>框架<br>Framework</td>
<td>界面绑定<br>UI Bindings</td>
<td>视图排版<br>Composed Views</td>
<td>页面展现层<br>Web Presentation Layer</td>
<td>兼容其它<br>Plays Nicely w/ Others</td>
</tr>
<tr>
<td>Backbone.js</td>
<td><font color="red">N</font></td>
<td><font color="red">N</font></td>
<td><font color="green">Y</font></td>
<td><font color="green">Y</font></td>
</tr>
<tr>
<td>SproutCore 1.x</td>
<td><font color="green">Y</font></td>
<td><font color="green">Y</font></td>
<td><font color="red">N</font></td>
<td><font color="red">N</font></td>
</tr>
<tr>
<td>Sammy.js</td>
<td><font color="red">N</font></td>
<td><font color="red">N</font></td>
<td><font color="green">Y</font></td>
<td><font color="green">Y</font></td>
</tr>
<tr>
<td>Spine.js</td>
<td><font color="red">N</font></td>
<td><font color="red">N</font></td>
<td><font color="green">Y</font></td>
<td><font color="green">Y</font></td>
</tr>
<tr>
<td>Cappuccino</td>
<td><font color="green">Y</font></td>
<td><font color="green">Y</font></td>
<td><font color="red">N</font></td>
<td><font color="red">N</font></td>
</tr>
<tr>
<td>Knockout.js</td>
<td><font color="green">Y</font></td>
<td><font color="red">N</font></td>
<td><font color="green">Y</font></td>
<td><font color="green">Y</font></td>
</tr>
<tr>
<td>Javascript MVC</td>
<td><font color="red">N</font></td>
<td><font color="green">Y</font></td>
<td><font color="green">Y</font></td>
<td><font color="green">Y</font></td>
</tr>
<tr>
<td>Google Web Toolkit</td>
<td><font color="red">N</font></td>
<td><font color="green">Y</font></td>
<td><font color="red">N</font></td>
<td><font color="red">N</font></td>
</tr>
<tr>
<td>Google Closure</td>
<td><font color="red">N</font></td>
<td><font color="green">Y</font></td>
<td><font color="green">Y</font></td>
<td><font color="red">N</font></td>
</tr>
<tr>
<td>Ember.js</td>
<td><font color="green">Y</font></td>
<td><font color="green">Y</font></td>
<td><font color="green">Y</font></td>
<td><font color="green">Y</font></td>
</tr>
<tr>
<td>Angular.js</td>
<td><font color="green">Y</font></td>
<td><font color="red">N</font></td>
<td><font color="green">Y</font></td>
<td><font color="green">Y</font></td>
</tr>
<tr>
<td>Batman.js</td>
<td><font color="green">Y</font></td>
<td><font color="red">N</font></td>
<td><font color="green">Y</font></td>
<td><font color="green">Y</font></td>
</tr>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装和测试Node.js]]></title>
    <link href="http://khua.github.com/blog/2012/03/15/an-zhuang-he-ce-shi-node-dot-js/"/>
    <updated>2012-03-15T22:24:00+08:00</updated>
    <id>http://khua.github.com/blog/2012/03/15/an-zhuang-he-ce-shi-node-dot-js</id>
    <content type="html"><![CDATA[<h3>NodeJS，服务器端的JavaScript</h3>

<p><img src="/images/nodejs.png" width="245" height="66" title="[Node.js]" ></p>

<p>JavaScript 最早是运行在浏览器中,然而浏览器只是提供了一个上下文，它定义了使用 JavaScript 可以做什么,但并没有“说”太多关于 JavaScript 语言本身可以做什么。事实上, JavaScript 是一门“完整”的语言:它可以使用在不同的上下文中,其能力与其他同类语言相比有过之而无不及。</p>

<p>Node.js 事实上就是另外一种上下文,它允许在后端(脱离浏览器环境)运行 JavaScript 代码。要实现在后台运行 JavaScript 代码,代码需要先被解释然后正确的执行。Node.js 的原理正是如此,它使用了 <code>Google 的 V8 虚拟机</code>(Google 的 Chrome 浏览器使用的 JavaScript 执行环境),来解释和执行 JavaScript 代码。</p>

<p>除此之外,伴随着 Node.js 的还有许多有用的模块,它们可以简化很多重复的劳作,比如向终端输出字符串。因此,Node.js 事实上既是一个运行时环境,同时又是一个库。要使用 Node.js, 首先需要进行安装。</p>

<h3>安装Node.js</h3>

<p><code>
wget http://nodejs.org/dist/v0.6.12/node-v0.6.12.tar.gz
tar xzvf node-v0.6.12.tar.gz
cd node-v0.6.12
./configure
make &amp;&amp; make install
</code></p>

<!--more-->


<h3>测试Node.js</h3>

<ul>
<li><p>查看node.js版本：<code>node -v</code></p></li>
<li><p>测试 Hello World Script for Node.js：</p></li>
</ul>


<p>vim helloworld.js</p>

<p><code>javascript
var http = require('http');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/plain'});
  res.end('Hello World\n');
}).listen(1229, '127.0.0.1');
console.log('Server running at http://127.0.0.1:1229/');
</code></p>

<p>系统会提示：<code>Server running at http://127.0.0.1:1229/</code>，打开浏览器输入<code>127.0.0.1:1229</code>就可以查看效果啦。</p>

<ul>
<li>或从https://github.com/ry/node_chat下载示例</li>
</ul>


<h3>通过NPM安装forever或juggernaut</h3>

<ul>
<li>安装npm (如果权限不够，可以将<code>sh</code>改为<code>sudo sh</code>)</li>
</ul>


<p><code>
curl http://npmjs.org/install.sh | sh
</code></p>

<ul>
<li>使用npm安装forever和juggernaut</li>
</ul>


<p><code>
npm install forever -g
npm install juggernaut -g
</code></p>

<ul>
<li>在Rails中使用juggernaut</li>
</ul>


<p>在Gemfile中加入：<code>gem juggernaut</code></p>
]]></content>
  </entry>
  
</feed>
